import { API, AccessoryConfig, AccessoryPlugin, Logging, Service } from 'homebridge';
interface MrCoolConfig extends AccessoryConfig {
    ip?: string;
    mac?: string;
    name: string;
    pollInterval?: number;
    enableFanOnly?: boolean;
    enableDryMode?: boolean;
    enablePresets?: boolean;
    enableSwing?: boolean;
    autoDisableBeeper?: boolean;
    commandDebounceMs?: number;
    ackTimeoutMs?: number;
    mock?: boolean;
    debug?: boolean;
}
export declare class MrCoolSmartLightAccessory implements AccessoryPlugin {
    private readonly log;
    private readonly config;
    private readonly hap;
    private readonly api;
    private thermostatService;
    private informationService;
    private humidityService?;
    private outdoorTempService?;
    private fanOnlySwitch?;
    private dryModeSwitch?;
    private presetSwitches;
    private swingSwitch?;
    private beeperSwitch?;
    private currentTemp;
    private targetTemp;
    private outdoorTemp;
    private beeperOn;
    private currentState;
    private targetState;
    private humidity;
    private internalMode;
    private pollTimer?;
    private es?;
    private climateEntityId;
    private pendingReconnectDelay;
    private pendingSendTimer?;
    private lastSentMode?;
    private lastSentTarget?;
    private debounceMs;
    private ackTimeoutMs;
    private pendingAck?;
    private currentPreset;
    private currentSwingMode;
    constructor(log: Logging, config: MrCoolConfig, api: API);
    private debug;
    private setInternalMode;
    private applyInternalModeToCurrent;
    private scheduleSyncToDevice;
    private buildDeviceMode;
    private roundTemp;
    private flushPendingSend;
    private pollStatus;
    private updateCharacteristics;
    private handleCurrentStateGet;
    private handleTargetStateGet;
    private handleTargetStateSet;
    private handleCurrentTempGet;
    private handleTargetTempGet;
    private handleTargetTempSet;
    getServices(): Service[];
    private connectEventStream;
    private scheduleReconnect;
    private cleanupEventStream;
    private handleClimateState;
    private requestPreset;
    private requestSwing;
    private disableBeeper;
    private startAck;
    private checkAckSatisfied;
    private sendBeeper;
}
export {};
